apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-{{ .Values.applicationName }}
  labels:
    app: {{ .Values.applicationName }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.applicationName }}
  template:
    metadata:
      labels:
        app: {{ .Values.applicationName }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "3000"
    spec:
      imagePullSecrets:
      - name: regcred
      containers:
      - name: app-{{ .Values.applicationName }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: 3000
        readinessProbe:
          httpGet:
            port: 3000
            path: {{ .Values.healthcheckPath }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        livenessProbe:
          httpGet:
            port: 3000
            path: {{ .Values.healthcheckPath }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        env:
        {{- range $key, $val := .Values.additionalEnv }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end }}
